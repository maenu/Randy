#!/usr/local/bin/bash

cd /home/tc

urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

OLD_IFS=$IFS
IFS='=&'
QUERY=($QUERY_STRING)
IFS=$OLD_IFS
for ((i=0; i<${#QUERY[@]}; i+=2))
do
	declare QUERY_PARAMETER_${QUERY[i]^^}=$(urldecode ${QUERY[i+1]})
done
LOCK='versions.lock'
LOG='versions.log'
REPOSITORY=$(printf %q "$QUERY_PARAMETER_REPOSITORY")

set_content() {
	CONTENT="$1"
	CONTENT_LENGTH=$(printf "$CONTENT" | wc -c)
	printf 'Content-Type: text/plain\r\n'
	printf "Content-Length: $CONTENT_LENGTH\r\n"
	printf '\r\n'
	printf "$CONTENT"
}
run_pharo() {
	./pharo-default config "$1" &> "$2"
	if [ $? -ne 0 ]
	then
		printf 'HTTP/1.1 400 Bad Request\r\n'
	fi
	# skip iconv_open(UTF-8, MACINTOSH): Invalid argument
	set_content "$(tail -n +2 "$2")"
	rm -f "$2"
}
# available in subshell
export -f set_content
export -f run_pharo

if [ -z "$QUERY_PARAMETER_REPOSITORY" ]
then
	printf 'HTTP/1.1 400 Bad Request\r\n'
	set_content '<repository> query parameter required.'
	exit 1
fi

(
	timeout -t 30 flock 200
	if [ $? -ne 0 ]
	then
		printf 'HTTP/1.1 503 Service Unavailable\r\n'
		set_content 'Could not acquire lock, retry later.'
		exit 1
	fi
	timeout -t 30 bash -c 'run_pharo ${1+"$@"}' run_pharo "$REPOSITORY" "$LOG"
	if [ $? -ne 0 ]
	then
		printf 'HTTP/1.1 504 Gateway Timeout\r\n'
		set_content 'Pharo took too long to execute, optimize script.'
		exit 1
	fi
) 200> "$LOCK"
